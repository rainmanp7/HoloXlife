name: Debug Boot Test with Bochs (Maximum Verbosity)

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-boot-debug:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    env:
      IMAGE_NAME: emergeos.img
      SERIAL_LOG: serial.log
      BOCHS_LOG: bochs.log
      BOCHS_CONFIG: bochsrc.txt
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache APT Dependencies
        id: apt-cache
        uses: actions/cache@v4
        with:
          path: |
            /var/cache/apt/archives
            /var/lib/apt/lists
          key: ${{ runner.os }}-apt-bochs-${{ hashFiles('**/Makefile') }}-v1
          restore-keys: |
            ${{ runner.os }}-apt-bochs-

      - name: Install Bochs and Dependencies
        run: |
          echo "Installing Bochs and build tools..."
          sudo apt-get update -y
          sudo apt-get install -y build-essential nasm gcc-multilib bochs bochs-x gettext-base

      - name: System Information
        run: |
          echo "=== SYSTEM INFORMATION ==="
          uname -a
          echo "Bochs version:"
          bochs --version 2>&1 || echo "Bochs version check failed"
          echo "Bochs packages:"
          dpkg -l | grep bochs || echo "No bochs packages found"
          echo "=========================="

      - name: Build Kernel Image
        run: |
          echo "=== BUILDING $IMAGE_NAME ==="
          if [ ! -f Makefile ]; then
            echo "❌ Error: Makefile not found."
            ls -la
            exit 1
          fi
          
          echo "Cleaning previous builds..."
          make clean 2>/dev/null || true
          
          echo "Building image..."
          if ! make $IMAGE_NAME; then
            echo "❌ Build failed"
            echo "Directory contents:"
            ls -la
            echo "Make output available above"
            exit 1
          fi
          
          if [ ! -f "$IMAGE_NAME" ]; then
            echo "❌ $IMAGE_NAME not created"
            echo "Directory contents after build:"
            ls -la
            exit 1
          fi
          
          echo "✅ Built $IMAGE_NAME ($(stat -c%s "$IMAGE_NAME") bytes)"

      - name: Create Bochs Configuration
        run: |
          echo "Creating Bochs configuration file..."
          cat > "$BOCHS_CONFIG" << EOF
          # Bochs Configuration for Maximum Debugging
          floppya: 1_44=$IMAGE_NAME, status=inserted
          boot: a
          log: $BOCHS_LOG
          panic: action=report
          error: action=report
          info: action=report
          debug: action=report
          cpu: model=pentium, ips=1000000
          memory: guest=64
          vga: enabled=0
          com1: enabled=1, mode=file, dev=$SERIAL_LOG
          magic_break: enabled=1
          EOF
          
          echo "Generated Bochs configuration:"
          cat "$BOCHS_CONFIG"

      - name: Run Bochs Boot Test
        run: |
          echo "=== RUNNING BOCHS ==="
          echo "Starting Bochs with maximum verbosity..."
          
          # Ensure log files don't exist from previous runs
          rm -f "$BOCHS_LOG" "$SERIAL_LOG" bochs_stderr.log
          
          # Run Bochs with timeout, capturing both stdout and stderr
          set +e
          timeout 15s bochs -q -f "$BOCHS_CONFIG" 2>&1 | tee bochs_output.log
          BOCHS_EXIT_CODE=$?
          set -e
          
          echo "Bochs execution completed with exit code: $BOCHS_EXIT_CODE"
          
          # Exit code 124 means timeout, which is expected
          if [ $BOCHS_EXIT_CODE -eq 124 ]; then
            echo "✅ Bochs timed out as expected (15 seconds)"
          elif [ $BOCHS_EXIT_CODE -eq 0 ]; then
            echo "✅ Bochs exited normally"
          else
            echo "⚠️ Bochs exited with code $BOCHS_EXIT_CODE"
          fi

      - name: Comprehensive Output Analysis
        run: |
          echo "=== BOCHS DEBUG ANALYSIS ==="
          
          echo "1. BOCHS COMBINED OUTPUT:"
          if [ -f bochs_output.log ] && [ -s bochs_output.log ]; then
            echo "--- Bochs output (last 100 lines) ---"
            tail -100 bochs_output.log
          else
            echo "No combined output file found or empty"
          fi
          
          echo ""
          echo "2. BOCHS LOG FILE:"
          if [ -f "$BOCHS_LOG" ] && [ -s "$BOCHS_LOG" ]; then
            echo "--- Bochs log (last 100 lines) ---"
            tail -100 "$BOCHS_LOG"
            echo "Total log lines: $(wc -l < "$BOCHS_LOG")"
            
            # Check for critical errors that indicate boot failure
            if grep -i "exception\|fault\|triple.*fault\|panic" "$BOCHS_LOG" > /dev/null; then
              echo "⚠️ CRITICAL BOOT ERRORS DETECTED"
              echo "Boot process encountered critical errors - this may indicate kernel issues"
              grep -i "exception\|fault\|triple.*fault\|panic" "$BOCHS_LOG" | head -10
              exit 1
            else
              echo "✅ No critical boot errors found in Bochs log"
            fi
          else
            echo "Bochs log file is empty or missing"
            echo "This might indicate Bochs didn't start properly"
          fi
          
          echo ""
          echo "3. SERIAL OUTPUT:"
          if [ -f "$SERIAL_LOG" ] && [ -s "$SERIAL_LOG" ]; then
            echo "--- Serial output ---"
            cat "$SERIAL_LOG"
          else
            echo "No serial output captured"
          fi
          
          echo ""
          echo "4. FILE LISTING:"
          echo "Generated files in workspace:"
          ls -la *.log *.img *.txt 2>/dev/null || echo "No log/image files found"
