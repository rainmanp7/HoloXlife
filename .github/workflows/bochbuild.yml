name: Debug Boot Test with Bochs (Maximum Verbosity)

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-boot-debug:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    env:
      IMAGE_NAME: emergeos.img
      SERIAL_LOG: serial.log
      BOCHS_LOG: bochs.log
      BOCHS_CONFIG: bochsrc.txt
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache APT Dependencies
        id: apt-cache
        uses: actions/cache@v4
        with:
          path: |
            /var/cache/apt/archives
            /var/lib/apt/lists
          key: ${{ runner.os }}-apt-bochs-${{ hashFiles('**/Makefile') }}-v1
          restore-keys: |
            ${{ runner.os }}-apt-bochs-

      - name: Install Bochs and Dependencies
        run: |
          echo "Installing Bochs and build tools..."
          sudo apt-get update -y
          sudo apt-get install -y build-essential nasm gcc-multilib bochs bochs-x gettext-base xvfb

      - name: System Information
        run: |
          echo "=== SYSTEM INFORMATION ==="
          uname -a
          echo "Bochs version:"
          bochs --version 2>&1 || echo "Bochs version check failed"
          echo "Bochs packages:"
          dpkg -l | grep bochs || echo "No bochs packages found"
          echo "=========================="

      - name: Build Kernel Image
        run: |
          echo "=== BUILDING $IMAGE_NAME ==="
          if [ ! -f Makefile ]; then
            echo "‚ùå Error: Makefile not found."
            ls -la
            exit 1
          fi
          
          echo "Cleaning previous builds..."
          make clean 2>/dev/null || true
          
          echo "Building image..."
          if ! make $IMAGE_NAME; then
            echo "‚ùå Build failed"
            echo "Directory contents:"
            ls -la
            echo "Make output available above"
            exit 1
          fi
          
          if [ ! -f "$IMAGE_NAME" ]; then
            echo "‚ùå $IMAGE_NAME not created"
            echo "Directory contents after build:"
            ls -la
            exit 1
          fi
          
          echo "‚úÖ Built $IMAGE_NAME ($(stat -c%s "$IMAGE_NAME") bytes)"

      - name: Create Bochs Configuration
        run: |
          echo "Creating Bochs configuration file..."
          cat > "$BOCHS_CONFIG" << EOF
          # Bochs Configuration for Maximum Debugging
          floppya: 1_44=$IMAGE_NAME, status=inserted
          boot: floppy
          log: $BOCHS_LOG
          panic: action=report
          error: action=report
          info: action=report
          debug: action=report
          cpu: model=pentium_mmx, ips=1000000
          megs: 64
          vga: extension=none
          com1: enabled=1, mode=file, dev=$SERIAL_LOG
          magic_break: enabled=1
          EOF
          
          echo "Generated Bochs configuration:"
          cat "$BOCHS_CONFIG"

      - name: Run Bochs Boot Test
        run: |
          echo "=== RUNNING BOCHS ==="
          echo "Starting Bochs with maximum verbosity..."
          
          # Ensure log files don't exist from previous runs
          rm -f "$BOCHS_LOG" "$SERIAL_LOG" bochs_output.log
          
          # Check available display libraries
          echo "Checking Bochs display capabilities..."
          bochs --help display 2>&1 | grep -i display || true
          
          # Run Bochs with timeout, using DISPLAY=:99 for headless mode
          set +e
          export DISPLAY=:99
          Xvfb :99 -screen 0 1024x768x24 &
          XVFB_PID=$!
          sleep 2
          
          timeout 15s bochs -q -f "$BOCHS_CONFIG" 2>&1 | tee bochs_output.log
          BOCHS_EXIT_CODE=$?
          
          # Clean up Xvfb
          kill $XVFB_PID 2>/dev/null || true
          set -e
          
          echo "Bochs execution completed with exit code: $BOCHS_EXIT_CODE"
          
          # Exit code 124 means timeout, which is expected
          if [ $BOCHS_EXIT_CODE -eq 124 ]; then
            echo "‚úÖ Bochs timed out as expected (15 seconds)"
          elif [ $BOCHS_EXIT_CODE -eq 0 ]; then
            echo "‚úÖ Bochs exited normally"
          else
            echo "‚ö†Ô∏è Bochs exited with code $BOCHS_EXIT_CODE"
          fi

      - name: Comprehensive Output Analysis
        run: |
          echo "=== BOCHS DEBUG ANALYSIS ==="
          
          echo "1. BOCHS COMBINED OUTPUT:"
          if [ -f bochs_output.log ] && [ -s bochs_output.log ]; then
            echo "--- Bochs output (last 100 lines) ---"
            tail -100 bochs_output.log
          else
            echo "No combined output file found or empty"
          fi
          
          echo ""
          echo "2. BOCHS LOG FILE:"
          if [ -f "$BOCHS_LOG" ] && [ -s "$BOCHS_LOG" ]; then
            echo "--- Bochs log (last 100 lines) ---"
            tail -100 "$BOCHS_LOG"
            echo "Total log lines: $(wc -l < "$BOCHS_LOG")"
            
            # Look for specific kernel boot information
            echo ""
            echo "=== KERNEL BOOT ANALYSIS ==="
            if grep -i "exception\|fault\|triple.*fault\|panic\|error" "$BOCHS_LOG" > /dev/null; then
              echo "üîç KERNEL BOOT ISSUES FOUND:"
              grep -i "exception\|fault\|triple.*fault\|panic\|error" "$BOCHS_LOG" | tail -10
              echo ""
              echo "üìã MEMORY/CPU STATE AT ERROR:"
              grep -A5 -B5 "exception\|fault\|panic" "$BOCHS_LOG" | tail -20 || true
            fi
            
            # Don't fail the workflow - we want to see what's happening
            echo "‚ö†Ô∏è Boot errors detected, but continuing analysis for debugging"
          else
            echo "Bochs log file is empty or missing"
            echo "This might indicate Bochs didn't start properly"
            exit 1
          fi
          
          echo ""
          echo "3. SERIAL OUTPUT:"
          if [ -f "$SERIAL_LOG" ] && [ -s "$SERIAL_LOG" ]; then
            echo "--- Serial output ---"
            cat "$SERIAL_LOG"
          else
            echo "No serial output captured"
          fi
          
          echo ""
          echo "4. FILE LISTING:"
          echo "Generated files in workspace:"
          ls -la *.log *.img *.txt 2>/dev/null || echo "No log/image files found"
          
          echo ""
          echo "5. DETAILED KERNEL ANALYSIS:"
          if [ -f "$IMAGE_NAME" ]; then
            echo "Kernel image size: $(stat -c%s "$IMAGE_NAME") bytes"
            echo "Kernel image type:"
            file "$IMAGE_NAME" || true
            echo "First 32 bytes of kernel (hex):"
            xxd -l 32 "$IMAGE_NAME" 2>/dev/null || hexdump -C "$IMAGE_NAME" | head -3
          fi
