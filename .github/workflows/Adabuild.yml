name: EmergeOS Ada Build and Boot Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-test-ada:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    
    env:
      IMAGE_NAME: emergeos.img
      SERIAL_LOG: serial.log
      BOCHS_LOG: bochs.log
      BOCHS_CONFIG: bochsrc.txt
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Cache APT Dependencies
        id: apt-cache
        uses: actions/cache@v4
        with:
          path: |
            /var/cache/apt/archives
            /var/lib/apt/lists
          key: ${{ runner.os }}-ada-bochs-${{ hashFiles('**/Makefile') }}-v3
          restore-keys: |
            ${{ runner.os }}-ada-bochs-

      - name: Install Ada Compiler and Dependencies
        run: |
          echo "📦 Installing GNAT Ada compiler and build tools..."
          sudo apt-get update -q
          sudo apt-get install -y \
            build-essential \
            nasm \
            gnat \
            gcc-multilib \
            bochs \
            bochs-x \
            gettext-base \
            xvfb \
            libncurses5-dev \
            xxd
          echo "✅ Installation complete"

      - name: Verify Ada Installation
        run: |
          echo "🔍 Verifying Ada toolchain..."
          echo "GNAT version:"
          gnat --version || echo "GNAT not available"
          echo ""
          echo "GCC version:"
          gcc --version | head -1 || echo "GCC not available"
          echo ""
          echo "NASM version:"
          nasm --version || echo "NASM not available"
          echo ""
          echo "Bochs version:"
          bochs --version 2>&1 | head -3 || echo "Bochs version check failed"
          echo "✅ Ada toolchain verification complete"

      - name: Show Project Files
        run: |
          echo "📁 Project structure:"
          ls -la
          echo ""
          echo "🔍 Checking required files:"
          for file in \
            boot.asm \
            kernel_entry.asm \
            linker.ld \
            emergeos.adb \
            system.ads \
            s-lastch.ads \
            s-lastch.adb \
            s-memory.ads \
            s-memory.adb \
            Makefile; do
            if [ -f "$file" ]; then
              echo "✅ $file ($(stat -c%s "$file") bytes)"
            else
              echo "❌ $file - MISSING"
            fi
          done

      - name: Build EmergeOS Ada Kernel
        run: |
          echo "🔨 Building EmergeOS with Ada kernel..."
          
          # Clean any existing build
          make clean 2>/dev/null || true
          
          # Show Makefile targets for debugging
          echo "Available Makefile targets:"
          make help 2>/dev/null || make -n 2>/dev/null | head -10 || echo "No help available"
          
          # Try to build step by step for better error reporting
          echo "Building bootloader..."
          make boot.bin || { echo "❌ Failed to build bootloader"; exit 1; }
          
          echo "Building kernel..."
          make kernel.bin || { echo "❌ Failed to build kernel"; exit 1; }
          
          echo "Creating disk image..."
          make $IMAGE_NAME || { echo "❌ Failed to create disk image"; exit 1; }
          
          # Verify build results
          if [ ! -f "$IMAGE_NAME" ]; then
            echo "❌ $IMAGE_NAME not created"
            echo "Directory contents:"
            ls -la
            exit 1
          fi
          
          echo "✅ Build successful!"
          echo "📊 Build artifacts:"
          ls -la *.bin *.img *.elf 2>/dev/null || echo "No binary files found"

      - name: Analyze Kernel Binary
        run: |
          echo "🔍 Kernel analysis..."
          
          if [ -f kernel.bin ]; then
            echo "Kernel size: $(stat -c%s kernel.bin) bytes"
            echo "Kernel sectors needed: $(( ($(stat -c%s kernel.bin) + 511) / 512 ))"
            echo "Kernel file type:"
            file kernel.bin 2>/dev/null || echo "file command failed"
            echo "First 32 bytes (hex):"
            if command -v xxd >/dev/null 2>&1; then
              xxd -l 32 kernel.bin
            else
              hexdump -C kernel.bin | head -2
            fi
          else
            echo "⚠️ kernel.bin not found"
          fi
          
          if [ -f boot.bin ]; then
            echo "Bootloader size: $(stat -c%s boot.bin) bytes"
            echo "Boot signature (last 2 bytes should be 55 AA):"
            if command -v xxd >/dev/null 2>&1; then
              xxd -s -2 boot.bin | grep -i '55aa' || echo "Boot signature not found or incorrect"
            else
              tail -c 2 boot.bin | hexdump -C | grep -i '55aa' || echo "Boot signature check failed"
            fi
          else
            echo "⚠️ boot.bin not found"
          fi

      - name: Create Bochs Configuration  
        run: |
          echo "⚙️ Creating Bochs configuration..."
          cat > "$BOCHS_CONFIG" << 'EOF'
          # Bochs configuration for Ada EmergeOS
          floppya: 1_44=emergeos.img, status=inserted
          boot: floppy
          log: bochs.log
          panic: action=report
          error: action=report  
          info: action=report
          debug: action=ignore
          cpu: model=pentium_mmx, ips=2000000
          megs: 128
          vga: extension=none
          com1: enabled=1, mode=file, dev=serial.log
          magic_break: enabled=1
          display_library: x, options="gui_debug"
          EOF
          
          echo "📄 Bochs configuration:"
          cat "$BOCHS_CONFIG"

      - name: Test Boot with Bochs
        run: |
          echo "🚀 Testing EmergeOS Ada boot..."
          
          # Verify image exists
          if [ ! -f "$IMAGE_NAME" ]; then
            echo "❌ Image file $IMAGE_NAME not found"
            ls -la *.img 2>/dev/null || echo "No .img files found"
            exit 1
          fi
          
          # Clean previous logs
          rm -f "$BOCHS_LOG" "$SERIAL_LOG" bochs_output.log bochs_error.log
          
          # Start virtual display
          export DISPLAY=:99
          Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
          XVFB_PID=$!
          sleep 3
          
          # Test if Xvfb started correctly
          if ! kill -0 $XVFB_PID 2>/dev/null; then
            echo "❌ Failed to start virtual display"
            exit 1
          fi
          
          # Run Bochs with timeout and better error handling
          set +e
          timeout 20s bochs -q -f "$BOCHS_CONFIG" > bochs_output.log 2> bochs_error.log
          BOCHS_EXIT=$?
          set -e
          
          # Cleanup
          kill $XVFB_PID 2>/dev/null || true
          wait $XVFB_PID 2>/dev/null || true
          
          echo "Bochs exit code: $BOCHS_EXIT"
          if [ $BOCHS_EXIT -eq 124 ]; then
            echo "✅ Boot test timed out as expected (20 seconds)"
          elif [ $BOCHS_EXIT -eq 0 ]; then
            echo "✅ Bochs completed successfully"
          else
            echo "⚠️ Bochs exited with code $BOCHS_EXIT"
            echo "Error output:"
            cat bochs_error.log 2>/dev/null || echo "No error output"
          fi

      - name: Analyze Boot Results
        run: |
          echo "📊 Ada EmergeOS Boot Analysis"
          echo "============================="
          
          echo "1. 🖥️  BOCHS CONSOLE OUTPUT:"
          if [ -f bochs_output.log ] && [ -s bochs_output.log ]; then
            echo "--- Last 50 lines of Bochs output ---"
            tail -50 bochs_output.log
          else
            echo "No Bochs console output captured"
          fi
          
          echo ""
          echo "1b. 🚨 BOCHS ERROR OUTPUT:"
          if [ -f bochs_error.log ] && [ -s bochs_error.log ]; then
            echo "--- Bochs error output ---"
            cat bochs_error.log
          else
            echo "No Bochs error output"
          fi
          
          echo ""
          echo "2. 📋 BOCHS INTERNAL LOG:"
          if [ -f "$BOCHS_LOG" ] && [ -s "$BOCHS_LOG" ]; then
            echo "--- Bochs internal log (last 50 lines) ---"
            tail -50 "$BOCHS_LOG"
            
            # Look for boot success indicators
            echo ""
            echo "🔍 Boot analysis:"
            if grep -i "EMERGEOS.*ADA.*BOOTED\|SUCCESS.*Ada.*Kernel\|Ada.*kernel.*started" "$BOCHS_LOG" >/dev/null 2>&1; then
              echo "✅ Ada kernel boot message detected!"
            else
              echo "⚠️ No Ada kernel boot messages found in log"
            fi
            
            if grep -i "exception\|fault\|triple.*fault\|panic\|error" "$BOCHS_LOG" >/dev/null 2>&1; then
              echo "❌ System errors detected:"
              grep -i "exception\|fault\|triple.*fault\|panic\|error" "$BOCHS_LOG" | tail -5
            else
              echo "✅ No critical system errors detected"
            fi
          else
            echo "No Bochs internal log available"
          fi
          
          echo ""
          echo "3. 📺 SERIAL OUTPUT:"
          if [ -f "$SERIAL_LOG" ] && [ -s "$SERIAL_LOG" ]; then
            echo "--- Serial port output ---"
            cat "$SERIAL_LOG"
          else
            echo "No serial output captured"
          fi
          
          echo ""
          echo "4. 📈 BUILD SUMMARY:"
          if [ -f "$IMAGE_NAME" ]; then
            echo "Image: $IMAGE_NAME ($(stat -L -c%s "$IMAGE_NAME" 2>/dev/null || echo "0") bytes)"
          else
            echo "Image: $IMAGE_NAME - NOT FOUND"
          fi
          echo "Language: Ada 2012"
          echo "Compiler: GNAT"
          echo "Target: i386 bare metal"
          echo "Boot test: Completed"
          
          echo "✅ Analysis complete"

      - name: Upload Build Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: emergeos-ada-build-${{ github.sha }}
          path: |
            *.img
            *.bin
            *.elf
            *.log
            bochsrc.txt
          retention-days: 7
